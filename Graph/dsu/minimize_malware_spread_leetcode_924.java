import java.util.*;
public class minimize_malware_spread_leetcode_924{

    class Solution {
    
        public int minMalwareSpread(int[][] graph, int[] initial) {
            
            int len=graph.length;
            int[] par=new int[len];
            int[] size=new int[len];
            Arrays.sort(initial);
            Arrays.fill(size,1);
            
            for(int i=0;i<len;i++)
                par[i]=i;
            
            for(int i=0;i<len;i++){
                for(int j=0;j<len;j++){
                    if(graph[i][j]==1){
                        int p1=findPar(par,i);
                        int p2=findPar(par,j);
           
                        if(p1!=p2){
                            par[p1]=p2;
                            size[p2]+=size[p1];
                        }       
                    }
                }
            }
            
            HashMap<Integer,ArrayList<Integer>> hm=new HashMap<>();
            
            //Add the initials int their respective components
            for(int i=0;i<initial.length;i++){
                int temp=findPar(par,initial[i]);
                
                if(!hm.containsKey(temp))
                    hm.put(temp,new ArrayList<>());
                    
                hm.get(temp).add(initial[i]);
            }
            
            int max=0;
            int ans=initial[0];
            
            for(int i:hm.keySet()){
                //If the number of initials in a component is one, only then it is beneficial to remove
                if(hm.get(i).size()==1){
                    int temp=size[i];
                    if(temp>max){
                        max=temp;
                        ans=hm.get(i).get(0);
                    }
                    else if(max==temp && hm.get(i).get(0)<ans){
                        ans=hm.get(i).get(0);
                    }
                }
            }
            
            return ans;
        }
        
        public int findPar(int[] par,int idx){
            if(par[idx]==idx){
                    return idx;
            }
                
            else{
                int temp=findPar(par,par[idx]);
                par[idx]=temp;
                return temp;
            }       
        }
        
    }
    public static void main(String[] args) {
        
    }
}